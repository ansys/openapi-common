import pprint
from .model_base import Model


class ExampleModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "string_property": "str",
        "int_property": "int",
        "bool_property": "bool",
        "list_property": "list[str]",
    }

    attribute_map = {
        "string_property": "String",
        "int_property": "Integer",
        "bool_property": "Boolean",
        "list_property": "ListOfStrings",
    }

    subtype_mapping = {}

    def __init__(
        self,
        string_property=None,
        int_property=None,
        bool_property=None,
        list_property=None,
    ):  # noqa: E501
        self._string_property = None
        self._int_property = None
        self._bool_property = None
        self._list_property = None
        self.discriminator = None
        if string_property is not None:
            self._string_property = string_property
        if int_property is not None:
            self._int_property = int_property
        if bool_property is not None:
            self._bool_property = bool_property
        if list_property is not None:
            self._list_property = list_property

    @property
    def string_property(self):
        return self._string_property

    @string_property.setter
    def string_property(self, string_property):
        self._string_property = string_property

    @property
    def int_property(self):
        return self._int_property

    @int_property.setter
    def int_property(self, int_property):
        self._int_property = int_property

    @property
    def bool_property(self):
        return self._bool_property

    @bool_property.setter
    def bool_property(self, bool_property):
        self._bool_property = bool_property

    @property
    def list_property(self):
        return self._list_property

    @list_property.setter
    def list_property(self, list_property):
        self._list_property = list_property

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr in self.swagger_types.keys():
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
