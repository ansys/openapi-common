# Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
# SPDX-License-Identifier: MIT
#
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from ansys.openapi.common import ModelBase, Unset


class ExampleModel(ModelBase):
    """NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "string_property": "str",
        "int_property": "int",
        "bool_property": "bool",
        "list_property": "list[str]",
    }

    attribute_map = {
        "string_property": "String",
        "int_property": "Integer",
        "bool_property": "Boolean",
        "list_property": "ListOfStrings",
    }

    subtype_mapping = {}

    def __init__(
        self,
        string_property=Unset,
        int_property=Unset,
        bool_property=Unset,
        list_property=Unset,
    ):  # noqa: E501
        self._string_property = None
        self._int_property = None
        self._bool_property = None
        self._list_property = None
        self._nullable_property = None
        self._optional_property = None
        self.discriminator = None
        if string_property is not None:
            self._string_property = string_property
        if int_property is not None:
            self._int_property = int_property
        if bool_property is not None:
            self._bool_property = bool_property
        if list_property is not None:
            self._list_property = list_property

    @property
    def string_property(self):
        return self._string_property

    @string_property.setter
    def string_property(self, string_property):
        self._string_property = string_property

    @property
    def int_property(self):
        return self._int_property

    @int_property.setter
    def int_property(self, int_property):
        self._int_property = int_property

    @property
    def bool_property(self):
        return self._bool_property

    @bool_property.setter
    def bool_property(self, bool_property):
        self._bool_property = bool_property

    @property
    def list_property(self):
        return self._list_property

    @list_property.setter
    def list_property(self, list_property):
        self._list_property = list_property

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
