[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "ansys-openapi-common"
description = "Provides a helper to create sessions for use with Ansys OpenAPI clients."
version = "1.1.0"
license = "MIT"
authors = ["ANSYS, Inc."]
maintainers = ["PyAnsys Maintainers <pyansys.maintainers@ansys.com>"]
repository = "https://github.com/pyansys/openapi-common"
documentation = "https://openapi.docs.pyansys.com"
readme = "README.rst"
keywords = [
  "Ansys",
  "OpenAPI"
]
classifiers = [
  "License :: OSI Approved :: MIT License",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Information Analysis",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Operating System :: MacOS",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
]
packages = [
  { include = "**/*.py", from = "src" }
]

[tool.poetry.dependencies]
python = "^3.7"

# Packages for core library
importlib_metadata = { version = ">=1.0", python  = "<3.8" }  # Granta MI STK requires 3.4.0
requests = "^2.26"
requests-negotiate-sspi = { version = "^0.5.2", markers = "sys_platform == 'win32'"}
requests-ntlm = "^1.1.0"
pyparsing = "^3.0.8"
python-dateutil ="^2.6.1"
typing-extensions = { version = "^4.1", python = "<3.8" }

# Packages for oidc extra
requests_auth = { version = "^6.0", optional = true }
keyring = { version = ">=22,<24", optional = true }

# Packages for linux-kerberos extra
requests-kerberos = {version = "^0.13", markers = "sys_platform == 'linux'", optional = true }

# Test packages
pytest = { version = "*", optional = true }
pytest-cov = { version = "*", optional = true }
uvicorn = { version = "*", optional = true }
fastapi = { version = "*", optional = true }
pydantic = { version = "*", optional = true }
requests-mock = { version = "*", optional = true }
pytest-mock = { version = "*", optional = true }
covertable = { version = "*", optional = true }
asgi_gssapi = { version = "*", markers = "sys_platform == 'linux'", optional = true }

# Doc packages
ansys-sphinx-theme = { version = "0.5.2", optional = true }
numpydoc = { version = "1.4.0", optional = true }
sphinx = { version = "5.2.3", optional = true }
sphinx_autodoc_typehints = { version = "1.19.2", optional = true }
sphinx-notfound-page = { version = "0.8.3", optional = true }
sphinx-copybutton = { version = "0.5.0", optional = true }

[tool.poetry.extras]
oidc = [
  "requests_auth",
  "keyring"
]

linux-kerberos = [
  "requests-kerberos"
]

test = [
  "pytest",
  "pytest-cov",
  "uvicorn",
  "fastapi",
  "pydantic",
  "requests-mock",
  "pytest-mock",
  "covertable",
  "asgi_gssapi"
]

doc = [
  "pyansys-sphinx-theme",
  "numpydoc",
  "sphinx",
  "sphinx_autodoc_typehints",
  "sphinx-notfound-page",
  "sphinx-copybutton"
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py37,py38,py39,py310
isolated_build = True

[gh-actions]
python =
    3.7: py37
    3.8: py38
    3.9: py39
    3.10: py310

[testenv]
deps = pytest
extras = 
    test
    oidc
    linux-kerberos
commands = pytest --cov=ansys.openapi.common --cov-report=xml {posargs}

[testenv:lint]
deps =
    black
    mypy==0.910
    types-requests
    types-python-dateutil
    codespell==2.1.0
    {[testenv]deps}

commands =
    codespell ./src ./tests ./doc/source
    black --check ./tests ./src
    mypy ./src
"""

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
show_error_codes = true

[tool.coverage.run]
omit = [
  "**/_base/*"
]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
