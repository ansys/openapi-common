# check spelling, codestyle
name: Build and Test Package

# run only on main branch.  This avoids duplicated actions on PRs
on:
  pull_request:
  merge_group:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  MAIN_PYTHON_VERSION: '3.10'
  LIBRARY_NAME: 'ansys-openapi-common'
  DOCUMENTATION_CNAME: 'openapi.docs.pyansys.com'

permissions:
  contents: read

jobs:
  code-style:
    name: "Code style"
    runs-on: windows-latest
    steps:
      - uses: ansys/actions/code-style@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
         python-version: ${{ env.MAIN_PYTHON_VERSION }}
         skip-install: "false"

  doc-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ignore-changelogd: true

  doc-build:
    name: Documentation build
    runs-on: ubuntu-latest
    steps:
      - name: "Run Ansys documentation building action"
        uses: ansys/actions/doc-build@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          check-links: false
          sphinxopts: "-W --keep-going"
          optional-dependencies-name: ''
          group-dependencies-name: 'doc'

  build-wheelhouse:
    name: "Build wheelhouse for latest Python versions"
    runs-on: ${{ matrix.os }}
    needs: code-style
    permissions:
      id-token: write  # Required for Sigstore
      attestations: write  # Required to generate attestation
    strategy:
       matrix:
           os: [ubuntu-latest, windows-latest]
           python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: ansys/actions/build-wheelhouse@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          operating-system: ${{ matrix.os }}
          python-version: ${{ matrix.python-version }}
          attest-provenance: true

  tests:
    name: Unit test on supported platforms
    runs-on: ubuntu-latest
    needs: build-wheelhouse
    permissions:
      contents: read
      packages: read  # to allow the Action to pull from GitHub Packages container registry - required for kdc-server
    services:
      # Label used to access the service container
      kdc-server:
        # Github container registry address
        image: ghcr.io/ansys/kdc-container@sha256:af669430229c13a35f106b531868fb8bd7c53731b8de858b1fe9b21a62ae747d  # v0.2
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        volumes:
          # This is needed otherwise there won't be enough entropy to generate a new kerberos realm
          - /dev/urandom:/dev/random
          - /tmp/keytabs:/tmp/keytabs
        ports:
          - 749:749
          - 88:88/udp

    container:
      image: python@sha256:${{ matrix.image-sha }}  # official python images from DockerHub
      volumes:
        - /tmp/keytabs:/tmp/keytabs
    strategy:
      matrix:
        image-sha:
          - eebca922adbff26c092545ebe3783c37623f30ffda618559d3cede33d7d468a9  # 3.10
          - 16e9aaa3fdc728525d4bf3ce02fc311a18c87222005facc3e3c2a5795d297fe1  # 3.11
          - c1a5d356638cc86bd865d9019efbc34a6b0c3ad15a21e5ab4eb57bd2d1c3f7ce  # 3.12
          - a7f3b1fe09b0845ef2e7b675ea3539062dc286bdc82d17da0caae58b03b67543  # 3.13

    steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
      with:
        persist-credentials: false

    - name: Configure host kerberos
      run: |
        apt update
        export DEBIAN_FRONTEND=noninteractive
        apt install -yq krb5-user
        cp ./tests/integration/krb5.conf /etc/krb5.conf
        ./tests/integration/configure_keytab.sh

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install 'tox<4' poetry

    - name: Test with tox
      run: tox -- --with-kerberos

    - name: Upload coverage report
      uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7  # v5.5.1
      if: ${{ github.actor != 'dependabot[bot]' }}
      with:
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  build-library:
    name: "Build library"
    runs-on: ubuntu-latest
    needs: [ doc-build, tests ]
    permissions:
      id-token: write  # Required for Sigstore
      attestations: write  # Required to generate attestation
    steps:
      - uses: ansys/actions/build-library@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          library-name: ${{ env.LIBRARY_NAME }}
          python-version: ${{ env.MAIN_PYTHON_VERSION }}
          attest-provenance: true

  doc-deploy-dev:
    name: "Deploy development documentation"
    runs-on: ubuntu-latest
    needs: [ build-library ]
    if: github.event_name == 'push' && !contains(github.ref, 'refs/tags')
    permissions:
      contents: write  # to allow the Action to push to the gh-pages branch
    steps:
      - uses: ansys/actions/doc-deploy-dev@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          doc-artifact-name: documentation-html
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  update-changelog:
    name: "Update CHANGELOG for new tag"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # to allow the Action to push to the repo
      pull-requests: write  # to allow the Action to create a PR if needed
    steps:
      - uses: ansys/actions/doc-deploy-changelog@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          token: ${{ secrets.PYANSYS_CI_BOT_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}

  release:
    name: "Release"
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    needs: [build-library, update-changelog]
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write  # Required for trusted publisher auth to PyPI
      contents: write  # to allow the Action to upload a release asset
    steps:
    - name: "Download the library artifacts from build-library step"
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: ${{ env.LIBRARY_NAME }}-artifacts
        path: ${{ env.LIBRARY_NAME }}-artifacts

    - name: "Upload artifacts to PyPI using trusted publisher"
      uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # v1.13.0
      with:
        repository-url: "https://upload.pypi.org/legacy/"
        print-hash: true
        packages-dir: ${{ env.LIBRARY_NAME }}-artifacts
        skip-existing: false

    - uses: ansys/actions/release-github@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
      name: "Release to GitHub"
      with:
        library-name: ${{ env.LIBRARY_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}

  doc-deploy-stable:
    name: "Deploy stable documentation"
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    permissions:
      contents: write  # to allow the Action to push to the gh-pages branch
    steps:
      - uses: ansys/actions/doc-deploy-stable@c2fa7c93f6883114e0e643599431b33d29f0b13f  # v10.1.4
        with:
          cname: ${{ env.DOCUMENTATION_CNAME }}
          token: ${{ secrets.GITHUB_TOKEN }}
          bot-user: ${{ secrets.PYANSYS_CI_BOT_USERNAME }}
          bot-email: ${{ secrets.PYANSYS_CI_BOT_EMAIL }}
