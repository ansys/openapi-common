[{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.parameters_to_tuples.html#parameters_to_tuples","title":"parameters_to_tuples","text":"parameters_to_tuples\n\n\n\nstatic ApiClient.parameters_to_tuples(params, collection_formats)\n\nGet parameters as a list of tuples, formatting collections.\n\nParameters\n\nparams\n\nUnion[Dict, List[Tuple]]\n\nParameters for the request, either a dictionary with a name and value or a list\nof tuples with names and values.\n\ncollection_formats\n\nDict[python:str, python:str]\n\nDictionary with a parameter name and collection type specifier."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.with_credentials.html#with_credentials","title":"with_credentials","text":"with_credentials\n\n\n\nApiClientFactory.with_credentials(username, password, domain=None, authentication_scheme=AuthenticationScheme.AUTO)\n\nSet up client authentication for use with provided credentials.\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine whether NTLM or Basic Authentication should be used. The selected\nauthentication scheme will then be configured for use.\n\nParameters\n\nusername\n\npython:str\n\nUsername for the connection.\n\npassword\n\npython:str\n\nPassword for the connection.\n\ndomain\n\npython:str, optional\n\nDomain to use for connection if required. The default is None.\n\nauthentication_scheme\n\nAuthenticationScheme\n\nThe authentication scheme to use.\n\nAdded in version 2.1.\n\nAdded to\nApiClientFactory.with_credentials\nin version 2.1 of ansys-openapi-common.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Basic or NTLM authentication (Windows clients only).\n\nNotes\n\nNTLM authentication is not currently supported on Linux."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.request.html#request","title":"request","text":"request\n\n\n\nApiClient.request(method, url, query_params=None, headers=None, post_params=None, body=None, _preload_content=True, _request_timeout=None)\n\nMake the HTTP request and return it directly.\n\nParameters\n\nmethod\n\npython:str\n\nHTTP method verb.\n\nurl\n\npython:str\n\nAbsolute URL of the target endpoint, including any path and query parameters.\n\nquery_params\n\npython:str\n\nQuery parameters to pass in the URL.\n\nheaders\n\nDict\n\nHeaders to attach to the request.\n\npost_params\n\nOptional[Iterable[Tuple[python:str, Union[python:str, bytes, Tuple[python:str, Union[python:str, bytes], python:str]]]]]\n\nRequest post form parameters for multipart/form-data.\n\nbody\n\nSerializedType\n\nRequest body.\n\n_preload_content\n\nbool, optional\n\nWhether to return the underlying response without reading or decoding response data. The default\nis True, in which case the response data is read or decoded.  If False, the response\ndata is not read or decoded.\n\n_request_timeout\n\nUnion[python:float, Tuple[python:float, python:float], python:None]\n\nTimeout setting for the request. If only one number is provided, it is used as a total request timeout.\nIt can also be a pair (tuple) of (connection, read) timeouts. This parameter overrides the session-level\ntimeout setting."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.select_header_accept.html#select_header_accept","title":"select_header_accept","text":"select_header_accept\n\n\n\nstatic ApiClient.select_header_accept(accepts)\n\nReturn a correctly formatted Accept header value from the provided array of accepted content types.\n\nParameters\n\naccepts\n\nList[python:str], optional\n\nList of accepted content types.\n\nExamples\n\n>>> ApiClient.select_header_accept(['Application/JSON', 'text/xml'])\n'application/json, text/xml'"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.AuthenticationScheme.AUTO.html#auto","title":"AUTO","text":"AUTO\n\n\n\nAuthenticationScheme.AUTO = 'auto'\n\nUse the 401 response WWW-Authenticate header to select the best supported authentication scheme."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.call_api.html#call_api","title":"call_api","text":"call_api\n\n\n\nApiClient.call_api(resource_path, method, path_params=None, query_params=None, header_params=None, body=None, post_params=None, files=None, response_type=None, _return_http_data_only=None, collection_formats=None, _preload_content=True, _request_timeout=None, response_type_map=None)\n\nMake the HTTP request and return the deserialized data.\n\nParameters\n\nresource_path\n\npython:str\n\nPath to the method endpoint, relative to the base URL.\n\nmethod\n\npython:str\n\nHTTP method verb to call.\n\npath_params\n\nUnion[Dict[python:str, Union[python:str, python:int]], List[Tuple]]\n\nPath parameters to pass in the URL.\n\nquery_params\n\nUnion[Dict[python:str, Union[python:str, python:int]], List[Tuple]]\n\nQuery parameters to pass in the URL.\n\nheader_params\n\nUnion[Dict[python:str, Union[python:str, python:int]], List[Tuple]]\n\nHeader parameters to place in the request header.\n\nbody\n\nDeserializedType\n\nRequest body.\n\npost_params\n\nOptional[List[Tuple[python:str, Union[python:str, bytes, IO]]]]\n\nRequest POST form parameters for application/x-www-form-urlencoded and multipart/form-data.\n\nresponse_type\n\npython:str, optional\n\nExpected response data type.\n\nfiles\n\nOptional[Mapping[python:str, Union[python:str, bytes, IO]]]\n\nDictionary of the file name and path for multipart/form-data.\n\n_return_http_data_only\n\nbool, optional\n\nWhether to return response data without head status code and headers. The default\nis False.\n\ncollection_formats\n\nDict[python:str, python:str]\n\nCollection format name for path, query, header, and post parameters. This parameter maps the\nparameter name to the collection type.\n\n_preload_content\n\nbool, optional\n\nWhether to return the underlying response without reading or decoding response data. The default\nis True, in which case response data is read or decoded. If False, response data is not\nread or decoded.\n\n_request_timeout\n\nUnion[python:float, Tuple[python:float, python:float], python:None]\n\nTimeout setting for the request. If only one number is provided, it is used as a total request timeout.\nIt can also be a pair (tuple) of (connection, read) timeouts. This parameter overrides the session-level\ntimeout setting.\n\nresponse_type_map\n\nDict[python:int, Union[python:str, python:None]]\n\nDictionary of response status codes and response types for response deserialization. If provided, has\nprecedence over response_type."},{"objectID":"Home","href":"user_guide/index.html#user-guide","title":"User guide","text":"User guide"},{"objectID":"Home","href":"user_guide/index.html#basic-usage","title":"User guide > Basic usage","text":"Basic usage\n\nThe ApiClient class is designed to be wrapped by code that implements a client\nlibrary. You should override the __init__() or connect() methods\nto add additional required behavior.\n\nAuthentication is configured through the ApiClientFactory object and its\nwith_xxx() methods. If no authentication is required, you can use the\nwith_anonymous() method."},{"objectID":"Home","href":"user_guide/index.html#authentication-schemes","title":"User guide > Authentication schemes","text":"Authentication schemes\n\nOpenAPI-Common supports API servers configured with no authentication, API keys,\nclient certificates, and basic authentication.\n\nWindows users can also use Windows Integrated Authentication to connect to Kerberos-enabled\nAPIs with their Windows credentials and to NTLM where it is supported.\n\nLinux users can make use of Kerberos authentication via the [linux-kerberos] extra. This\nrequires a working installation of either MIT Kerberos or Heimdal, as well as some\nplatform-specific build steps. An additional requirement is a correctly configured krb5.keytab\nfile on your system.\n\nWindows and Linux users can authenticate with OIDC-enabled APIs by using the [oidc] extra.\nCurrently only the Authorization Code authentication flow is supported.\n\nAuthentication methods by platform\n\n\n\n\n\n\n\n\n\nAuthentication method\n\nWindows\n\nLinux\n\nBuilder method\n\nAPI Key\n\n✔️\n\n✔️\n\n.with_anonymous() 1\n\nBasic\n\n✔️\n\n✔️\n\n.with_credentials()\n\nNTLM\n\n✔️\n\n❌\n\n.with_credentials()\n\nKerberos\n\n✔️\n\n➕ 2\n\n.with_autologon()\n\nOIDC\n\n➕ 3\n\n➕ 3\n\n.with_oidc()\n\n1\n\nSet the appropriate header in api_session_configuration.\n\n2\n\nWhen installed as pip install ansys-openapi-common[linux-kerberos].\n\n3\n\nWhen installed as pip install ansys-openapi-common[oidc]."},{"objectID":"Home","href":"user_guide/index.html#session-configuration","title":"User guide > Session configuration","text":"Session configuration\n\nYou can set all options that are available in Python library requests through\nthe client with the SessionConfiguration object. This enables you to\nconfigure custom SSL certificate validation, send client certificates if your API\nserver requires them, and configure many other options.\n\nFor example, to send a client certificate with every request:"},{"objectID":"Home","href":"user_guide/index.html#https-certificates","title":"User guide > HTTPS certificates","text":"HTTPS certificates\n\nIt is common to use a private CA in an organization to generate TLS certificates for internal resources. The\nrequests library uses the certifi package which contains public CA certificates only, which means requests\ncannot verify private TLS certificates in its default configuration. The following error message is typically displayed\nif a private TLS certificate is validated against the certifi public CAs:\n\nIf you encounter this error message, you should provide requests with the CA used to generate your private TLS\ncertificate. There are three recommended approaches to doing this, listed below in the order of simplicity."},{"objectID":"Home","href":"user_guide/index.html#1-pip-system-certs","title":"User guide > 1. pip-system-certs","text":"1. pip-system-certs\n\nThe pip-system-certs library patches the certificate loading mechanism for requests to use the system\ncertificate store instead of the certifi store. Assuming the system certificate store includes the private CA, no\nfurther action is required beyond installing pip-system-certs in the same virtual environment as this package.\n\nThe change to requests affects every package in your environment, including pip. You must use a virtual\nenvironment when using pip-system-certs to avoid unexpected side-effects in other Python scripts.\n\nThis is recommended approach for Windows and Linux users. However, there are some situations in which\npip-system-certs cannot be used:\n\nYour platform is not supported by pip-system-certs.\n\nThe private CA certificate has not been added to the system certificate store.\n\nThe OpenSSL deployment used by Python is not configured to use the system certificate store (common when using\nconda-provided Python).\n\nIn these cases, the SSLCertVerificationError is still raised. Instead, provide the appropriate CA certificate to\nrequests directly."},{"objectID":"Home","href":"user_guide/index.html#2-system-ca-certificate-bundle-linux-only","title":"User guide > 2. System CA certificate bundle (Linux only)","text":"2. System CA certificate bundle (Linux only)\n\nThe SessionConfiguration object allows you to provide a path to a file containing one or more CA\ncertificates. The custom CA certificate file is used instead of the certifi package to verify the service’s TLS\ncertificate.\n\nIf you need to authenticate both internally- and publicly signed TLS certificates within the same environment, you must\nuse a CA bundle which contains both the internal and public CAs used to sign the TLS certificates.\n\nOIDC authentication often requires validating internally- and publicly signed TLS certificates, since both internal\nand public resources are used to authenticate the resource.\n\nCA bundles are often provided by Linux environments which include all trusted public CAs and any internal CAs added to\nthe system certificate store. These are available in the following locations:\n\nUbuntu: /etc/ssl/certs/ca-certificates.crt\n\nSLES: /var/lib/ca-certificates/ca-bundle.pem\n\nRHEL/Rocky Linux: /etc/pki/tls/cert.pem\n\nFor example, to use the system CA bundle in Ubuntu, use the following:\n\nThis allows requests to correctly validate both internally and publicly signed TLS certificates, as long as the\ninternal CA certificate has been added to the system certificate store. If the internal CA certificate has not been\nadded to the system certificate store, then a SSLCertVerificationError is still raised, and you should proceed to\nthe next section."},{"objectID":"Home","href":"user_guide/index.html#3-single-ca-certificate","title":"User guide > 3. Single CA certificate","text":"3. Single CA certificate\n\nIf you only need to authenticate internal TLS certificates, you can provide a path to the specific internal CA\ncertificate to be used for verification:\n\nWhere /home/username/my_private_ca_certificate.pem is the path to the CA certificate file.\n\nThe cert_store_path argument overrides the certifi CA certificates. Providing a single private CA certificate\ncauses requests to fail to validate publicly signed TLS certificates.\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.with_token.html#with_token","title":"with_token","text":"with_token\n\n\n\nOIDCSessionBuilder.with_token(refresh_token)\n\nUse a provided refresh token to authenticate the session.\n\nThe refresh token will be used to request a new access token from the Identity Provider,\nthis will be automatically refreshed shortly before expiration.\n\nParameters\n\nrefresh_token\n\npython:str\n\nRefresh token.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nNotes\n\nThe signature of this method will change in an upcoming release to allow both access and refresh\ntokens to be provided. Update usages to provide the refresh_token keyword argument rather than\npassing a positional argument."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.SessionConfiguration.get_configuration_for_requests.html#get_configuration_for_requests","title":"get_configuration_for_requests","text":"get_configuration_for_requests\n\n\n\nSessionConfiguration.get_configuration_for_requests()\n\nRetrieve the configuration as a dictionary, with keys corresponding to requests session properties.\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.with_refresh_token.html#with_refresh_token","title":"with_refresh_token","text":"with_refresh_token\n\n\n\nOIDCSessionBuilder.with_refresh_token(refresh_token)\n\nUse a provided refresh token to authenticate the session.\n\nThe refresh token will be used to request a new access token from the Identity Provider,\nthis will be automatically refreshed shortly before expiration.\n\nParameters\n\nrefresh_token\n\npython:str\n\nRefresh token.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nAdded in version 2.2.3: .."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiException.html#apiexception","title":"ApiException","text":"ApiException\n\n\n\nexception ApiException(status_code, reason_phrase, body=None, exception_model=None, headers=None)\n\nProvides the exception to raise when the remote server returns an unsuccessful response.\n\nFor more information about the failure, inspect .status_code and .reason_phrase. If the\nserver defines a custom exception model, .exception_model contains the deserialized response.\n\nParameters\n\nstatus_code\n\npython:int\n\nHTTP status code associated with the response.\n\nreason_phrase\n\npython:str\n\nDescription of the response provided by the server.\n\nbody\n\npython:str, optional\n\nContent of the response provided by the server. The default is None.\n\nexception_model: ModelBase, optional\n\nThe custom exception model if defined by the server. The default is None.\n\nheaders\n\nCaseInsensitiveDict, optional\n\nResponse headers provided by the server. The default is None."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.AuthenticationScheme.BASIC.html#basic","title":"BASIC","text":"BASIC\n\n\n\nAuthenticationScheme.BASIC = 'Basic'\n\nForce the use of Basic authentication, even if more secure options are supported."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.AuthenticationScheme.NTLM.html#ntlm","title":"NTLM","text":"NTLM\n\n\n\nAuthenticationScheme.NTLM = 'NTLM'\n\nForce the use of NTLM authentication only. Do not fall back to Basic authentication."},{"objectID":"Contribute","href":"contributing.html#contribute","title":"Contribute","text":"Contribute\n\nOverall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to OpenAPI-Common.\n\nThe following contribution information is specific to OpenAPI-Common."},{"objectID":"Contribute","href":"contributing.html#clone-the-repository","title":"Contribute > Clone the repository","text":"Clone the repository\n\nTo clone and install the latest version of OpenAPI-Common in development mode,\nrun:"},{"objectID":"Contribute","href":"contributing.html#post-issues","title":"Contribute > Post issues","text":"Post issues\n\nUse the OpenAPI-Common Issues page\nto submit questions, report bugs, and request new features.\n\nTo reach the support team, email pyansys.support@ansys.com."},{"objectID":"Contribute","href":"contributing.html#documentation-conventions","title":"Contribute > Documentation conventions","text":"Documentation conventions\n\nWhen contributing to this package, always consider that many docstrings are viewed within\nthe context of a package that inherits from classes defined in this package. For example,\nApiClientFactory is typically subclassed, and the builder methods are shown\nwithin the subclassing package’s documentation as part of that module’s subclass.\nThe advice in this section ensures that a subclassing package can build documentation\nthat inherits docstrings from this package."},{"objectID":"Contribute","href":"contributing.html#docstring-type-references","title":"Contribute > Docstring type references","text":"Docstring type references\n\nIn cases where a class is intended to be subclassed, internal type references should be\nfully qualified. For example, instead of:\n\nuse:\n\nThis ensures that other packages that inherit from this package are able to resolve\nthese types via Intersphinx."},{"objectID":"Contribute","href":"contributing.html#references-to-this-package","title":"Contribute > References to this package","text":"References to this package\n\nDocstrings often contain implicit and explicit references to the package they are\ndocumenting. One common example of an implicit reference is in\n.. versionadded:: directives, where the directive implicitly refers to a version\nof the package being documented. To make these references explicit when they occur\noutside of this package, always use the following approach:\n\nWhere :class:`ansys.openapi.common.ClassName` is a reference to the relevant\nentity that contains the change. This approach ensures that:\n\nWhen building the documentation for this package, the .. versionadded::\ndirective is used and implicitly refers to version 2.1 of this package.\n\nWhen building the documentation for a package that inherits from classes\ndefined in this package, the more generic .. tip:: directive is used,\nand explicitly refers to version 2.1 of this package.\n\nIf the inheriting package has configured\nIntersphinx, then Sphinx\nautomatically adds a cross-reference to the relevant location in the API\ndocumentation for this package."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.DICT_MATCH_REGEX.html#dict_match_regex","title":"DICT_MATCH_REGEX","text":"DICT_MATCH_REGEX\n\n\n\nApiClient.DICT_MATCH_REGEX = re.compile('dict\\\\(([^,]*), (.*)\\\\)')\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.setup_client.html#setup_client","title":"setup_client","text":"setup_client\n\n\n\nApiClient.setup_client(models)\n\nSet up the client for use and register models for serialization and deserialization.\n\nThis step must be completed prior to using the ApiClient class.\n\nParameters\n\nmodels\n\nModuleType\n\nModule containing models generated by the Swagger code generator tool.\n\nExamples\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... import ApiModels as model_module\n... client.setup_client(model_module)"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.LIST_MATCH_REGEX.html#list_match_regex","title":"LIST_MATCH_REGEX","text":"LIST_MATCH_REGEX\n\n\n\nApiClient.LIST_MATCH_REGEX = re.compile('list\\\\[(.*)]')\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.with_access_token.html#with_access_token","title":"with_access_token","text":"with_access_token\n\n\n\nOIDCSessionBuilder.with_access_token(access_token)\n\nUse a provided access token to authenticate the session.\n\nThis method configures a session with the provided access token, if the token is invalid,\nor has expired, the session will be unable to authenticate.\n\nParameters\n\naccess_token\n\npython:str\n\nAccess token.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nAdded in version 2.2.3: .."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.with_oidc.html#with_oidc","title":"with_oidc","text":"with_oidc\n\n\n\nApiClientFactory.with_oidc(idp_session_configuration=None)\n\nSet up client authentication for use with OpenID Connect.\n\nParameters\n\nidp_session_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session when connected to the OpenID identity provider.\n\nReturns\n\nOIDCSessionBuilder\n\nBuilder object to authenticate via OIDC.\n\nNotes\n\nOIDC Authentication requires the [oidc] extra to be installed."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common._base.DeserializedType.html#deserializedtype","title":"DeserializedType","text":"DeserializedType\n\n\n\nDeserializedType\n\nalias of None | float | bool | bytes | str | int | datetime | date | Enum | List | Tuple | Dict | ModelBase"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common._base.SerializedType.html#serializedtype","title":"SerializedType","text":"SerializedType\n\n\n\nSerializedType\n\nalias of None | float | bool | bytes | str | int | List | Tuple | Dict"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.SessionConfiguration.html#sessionconfiguration","title":"SessionConfiguration","text":"SessionConfiguration\n\n\n\nclass SessionConfiguration(client_cert_path=None, client_cert_key=None, cookies=None, headers=None, max_redirects=10, proxies=None, verify_ssl=True, cert_store_path=None, temp_folder_path=None, debug=False, safe_chars_for_path_param='', retry_count=3, request_timeout=31)\n\nProvides configuration for the API client session.\n\nParameters\n\nclient_cert_path\n\npython:str, optional\n\nPath to the client certificate to send with the requests. The default is None, in which case\nno client certificate will be sent with requests.\n\nclient_cert_key\n\npython:str, optional\n\nKey to unlock the client certificate (if required). The default is None.\n\ncookies\n\nhttp.cookiejar.CookieJar or subclass, optional\n\nCookies to send with each request. The default is None.\n\nheaders\n\npython:dict, optional\n\nHeader values to include with each request, indexed by header name. This parameter is\ncase-insensitive. The default is None, in which case only required headers will be included.\n\nmax_redirects\n\npython:int, optional\n\nMaximum number of redirects to allow before halting. The default is 10.\n\nproxies\n\npython:dict, optional\n\nProxy server URLs, indexed by resource URLs. The default is None, in which case\nno proxies are registered for use.\n\nverify_ssl\n\nbool, optional\n\nWhether to verify the SSL certificate of the remote host. The default is True.\n\ncert_store_path\n\npython:str, optional\n\nPath to the custom certificate store in .pem format.  The default is None, in which case\nonly certificates included in the certifi package will be trusted.\n\ntemp_folder_path\n\npython:str, optional\n\nPath to the temporary directory where downloaded files are to be stored. The default is\nNone, in which case the user’s TEMP directory will be used.\n\ndebug\n\nbool, optional\n\nWhether a debug log is generated. The default is False. The log include sensitives information\nabout the authentication process.\n\nsafe_chars_for_path_param\n\npython:str, optional\n\nAdditional characters to treat as ‘safe’ when creating path parameters. For more\ninformation, see RFC 3986.\n\nretry_count\n\npython:int, optional\n\nNumber of attempts to make if the API server fails to return a valid response. The default is 3.\n\nrequest_timeout\n\npython:int, optional\n\nTimeout in seconds for requests to the API server. The default is 31.\n\nMethods\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.UndefinedObjectWarning.html#undefinedobjectwarning","title":"UndefinedObjectWarning","text":"UndefinedObjectWarning\n\n\n\nexception UndefinedObjectWarning\n\nProvides a warning for when a model is incompletely described in the OpenAPI definition.\n\nThe data received from the server cannot be fully deserialized, and so the response is provided\nas an un-deserialized dictionary.\n\nThis warning can be safely suppressed if the required detail cannot be added to the OpenAPI\ndefinition, but in this case the deserialization must be defined manually."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.connect.html#connect","title":"connect","text":"connect\n\n\n\nApiClientFactory.connect()\n\nFinalize the API client and return it for use.\n\nAuthentication must be configured for this method to succeed.\n\nReturns\n\nApiClient\n\nClient object that can be used to connect to the server and perform API operations.\n\nRaises\n\nValueError\n\nWhen the client is not fully configured."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.deserialize.html#deserialize","title":"deserialize","text":"deserialize\n\n\n\nApiClient.deserialize(response, response_type)\n\nDeserialize the response into an object.\n\nBased on the type of response, the appropriate object is created for use.\n\nFor responses that are in JSON format, this method processes the response and returns it:\n\nIf response_type is file, save the content to a temporary file and return the file name.\n\nIf response_type is datetime.datetime or datetime.date, parse the string and return the\ndatetime object.\n\nIf response_type is list, recursively deserialize the list contents.\n\nIf response_type is dict, recursively deserialize the dictionary keys and values.\n\nIf response_type is the name of an OpenAPI model, return the model object.\n\nParameters\n\nresponse\n\nrequests.Response\n\nResponse object received from the API.\n\nresponse_type\n\npython:str\n\nString name of the class represented.\n\nExamples\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... api_response = requests.Response()\n... api_response._content = b\"{'key': 'value'}\"\n... client.deserialize(api_response, 'Dict[str, str]]')\n{'key': 'value'}\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... api_response = requests.Response()\n... api_response._content = b\"'2015-10-21T10:05:10'\"\n... client.deserialize(api_response, 'datetime.datetime')\ndatetime.datetime(2015, 10, 21, 10, 5, 10)"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.select_header_content_type.html#select_header_content_type","title":"select_header_content_type","text":"select_header_content_type\n\n\n\nstatic ApiClient.select_header_content_type(content_types)\n\nReturn the preferred Content-Type header value from the provided array of valid content types.\n\nParameters\n\ncontent_types\n\nList[python:str], optional\n\nList of content types.\n\nNotes\n\nIf more than one valid Content-Type is provided, the first one in the list is used.\n\nExamples\n\n>>> ApiClient.select_header_content_type()\n'application/json'\n\n>>> ApiClient.select_header_content_type(['text/xml', 'Application/JSON'])\n'text/xml'\n\n>>> ApiClient.select_header_content_type(['*/*'])\n'application/json'"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.SessionConfiguration.from_dict.html#from_dict","title":"from_dict","text":"from_dict\n\n\n\nclassmethod SessionConfiguration.from_dict(configuration_dict)\n\nCreate a SessionConfiguration object from its dictionary form.\n\nThis is the inverse of the get_configuration_for_requests() method.\n\nParameters\n\nconfiguration_dict\n\npython:dict\n\nDictionary form of the session parameters."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.with_anonymous.html#with_anonymous","title":"with_anonymous","text":"with_anonymous\n\n\n\nApiClientFactory.with_anonymous()\n\nSet up client authentication for anonymous use.\n\nThis does not configure any authentication or authorization headers. Users must provide any\nauthentication information required themselves.\n\nClients relying on custom authentication such as client certificates or non-standard tokens\nshould use this method.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.authorize.html#authorize","title":"authorize","text":"authorize\n\n\n\nOIDCSessionBuilder.authorize(login_timeout=60)\n\nAuthenticate the user interactively by opening a web browser and waiting for the user to log in.\n\nParameters\n\nlogin_timeout\n\npython:int\n\nTime in seconds to wait for the user’s web browser to authenticate. The default is 60s.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.AuthenticationWarning.html#authenticationwarning","title":"AuthenticationWarning","text":"AuthenticationWarning\n\n\n\nexception AuthenticationWarning(message)\n\nProvides the warning to raise when the server connection process completes but does proceed as expected.\n\nParameters\n\nmessage\n\npython:str\n\nCause of the warning and any additional information."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.with_stored_token.html#with_stored_token","title":"with_stored_token","text":"with_stored_token\n\n\n\nOIDCSessionBuilder.with_stored_token(token_name='ansys-openapi-common-oidc')\n\nUse a token stored in the system keyring to authenticate the session.\n\nThis method requires a correctly configured system keyring backend.\n\nParameters\n\ntoken_name\n\npython:str\n\nName of the token key in the system keyring.\n\nReturns\n\nApiClientFactory\n\nOriginal client factory object.\n\nRaises\n\nValueError\n\nIf no token is found in the system keyring with the provided token_name."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.PRIMITIVE_TYPES.html#primitive_types","title":"PRIMITIVE_TYPES","text":"PRIMITIVE_TYPES\n\n\n\nApiClient.PRIMITIVE_TYPES = (<class 'float'>, <class 'bool'>, <class 'bytes'>, <class 'str'>, <class 'int'>)\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.generate_user_agent.html#generate_user_agent","title":"generate_user_agent","text":"generate_user_agent\n\n\n\ngenerate_user_agent(package_name, package_version)\n\nGenerate a user-agent string in the form <package info> <python info> <os info>.\n\nParameters\n\npackage_name\n\npython:str\n\nName of the package to include in the user-agent string.\n\npackage_version\n\npython:str\n\nVersion of the package to include in the user-agent string.\n\nReturns\n\npython:str\n\nUser-agent string."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.prepare_post_parameters.html#prepare_post_parameters","title":"prepare_post_parameters","text":"prepare_post_parameters\n\n\n\nstatic ApiClient.prepare_post_parameters(post_params=None, files=None)\n\nBuild form parameters.\n\nThis method combines plain form parameters and file parameters into a structure suitable for transmission.\n\nParameters\n\npost_params\n\nOptional[List[Tuple[python:str, Union[python:str, bytes]]]]\n\nPlain form parameters.\n\nfiles\n\nOptional[Mapping[python:str, Union[python:str, bytes]]]\n\nFile parameters."},{"objectID":"Home","href":"api/index.html#api-reference","title":"API reference","text":"API reference\n\nThis section summarizes OpenAPI-Common public\nclasses.\n\n"},{"objectID":"Home","href":"api/index.html#helper-functions","title":"API reference > Helper functions","text":"Helper functions\n\nThis section summarizes OpenAPI-Common helper functions.\n\n"},{"objectID":"Home","href":"api/index.html#exceptions-and-warnings","title":"API reference > Exceptions and warnings","text":"Exceptions and warnings\n\nThis section summarizes OpenAPI-Common exceptions and warnings.\n\n"},{"objectID":"Home","href":"api/index.html#type-aliases","title":"API reference > Type aliases","text":"Type aliases\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.with_autologon.html#with_autologon","title":"with_autologon","text":"with_autologon\n\n\n\nApiClientFactory.with_autologon()\n\nSet up client authentication for use with Kerberos (also known as integrated Windows authentication).\n\nThe default operation of this method is to attempt to connect to the API and to use the provided\nWWW-Authenticate header to determine if Negotiate authentication is supported by the server. If so,\nNegotiate will then be used for authentication.\n\nIf Negotiate authentication is not supported by the server, an exception is raised.\n\nReturns\n\nApiClientFactory\n\nCurrent client factory object.\n\nRaises\n\nConnectionError\n\nIf the server does not support Negotiate authentication.\n\nNotes\n\nRequires the user to have a valid Kerberos Ticket-Granting-Ticket (TGT).\n\nOn Windows, this is provided by default.\n\nOn Linux, this requires the [linux-kerberos] extension to be installed and your Kerberos installation\nto be configured correctly."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.sanitize_for_serialization.html#sanitize_for_serialization","title":"sanitize_for_serialization","text":"sanitize_for_serialization\n\n\n\nApiClient.sanitize_for_serialization(obj)\n\nBuild a JSON POST object.\n\nBased on the object type, this method returns the sanitized JSON representation to send to the server:\n\nIf obj is None, return None.\n\nIf obj is str, int, float or bool, return directly.\n\nIf obj is datetime.datetime or datetime.date, convert to string in iso8601 format.\n\nIf obj is list, sanitize each element in the list.\n\nIf obj is tuple, sanitize each element in the tuple.\n\nIf obj is dict, return the dict.\n\nIf obj is an OpenAPI model, return the properties dict.\n\nParameters\n\nobj\n\nDeserializedType\n\nData to sanitize and serialize.\n\nExamples\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... client.sanitize_for_serialization({'key': 'value'})\n{'key': 'value'}\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... client.sanitize_for_serialization(datetime.datetime(2015, 10, 21, 10, 5, 10))\n'2015-10-21T10:05:10'"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.NATIVE_TYPES_MAPPING.html#native_types_mapping","title":"NATIVE_TYPES_MAPPING","text":"NATIVE_TYPES_MAPPING\n\n\n\nApiClient.NATIVE_TYPES_MAPPING = {'bool': <class 'bool'>, 'bytes': <class 'bytes'>, 'date': <class 'datetime.date'>, 'datetime': <class 'datetime.datetime'>, 'float': <class 'float'>, 'int': <class 'int'>, 'str': <class 'str'>}\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClientFactory.html#apiclientfactory","title":"ApiClientFactory","text":"ApiClientFactory\n\n\n\nclass ApiClientFactory(api_url, session_configuration=None)\n\nCreates a factory that configures an API client for use with autogenerated Swagger clients.\n\nThis method handles setup of the retry strategy, session-level timeout, and any additional\nconfigurations for requests. Authentication must be configured afterwards using one of\nthe other class methods.\n\nParameters\n\napi_url\n\npython:str\n\nBase URL of the API server.\n\nsession_configuration\n\nSessionConfiguration, optional\n\nAdditional configuration settings for the requests session.\n\nMethods\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiConnectionException.html#apiconnectionexception","title":"ApiConnectionException","text":"ApiConnectionException\n\n\n\nexception ApiConnectionException(response)\n\nProvides the exception to raise when connection to the API server fails.\n\nFor more information about the failure, inspect .response.\n\nParameters\n\nresponse\n\nrequests.Response\n\nResponse from the server."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.AuthenticationScheme.html#authenticationscheme","title":"AuthenticationScheme","text":"AuthenticationScheme\n\n\n\nclass AuthenticationScheme(value, names=None, *, module=None, qualname=None, type=None, start=1, boundary=None)\n\nAuthentication scheme.\n\nUsed to specify an authentication scheme used when connecting to the server with credentials.\n\nAdded in version 2.1.\n\nAdded as AuthenticationScheme in version 2.1 of\nansys-openapi-common.\n\nAttributes\n\n"},{"objectID":"Home","href":"getting_started/index.html#getting-started","title":"Getting started","text":"Getting started\n\n"},{"objectID":"Home","href":"getting_started/index.html#software-requirements","title":"Getting started > Software requirements","text":"Software requirements\n\nThe ansys.openapi.common package currently supports Python version 3.10 through 3.13."},{"objectID":"Home","href":"getting_started/index.html#installation","title":"Getting started > Installation","text":"Installation\n\nTo install the latest OpenAPI-Common release from PyPI,\nrun this command:\n\nAlternatively, to install the latest development version from the OpenAPI-Common repository,\nrun this command:\n\nTo install a local development version with Git and Poetry, run these commands:\n\nThe preceding commands install the package in development mode so that you can modify\nit locally. Your changes are reflected in your Python setup after restarting the Python kernel."},{"objectID":"Home","href":"getting_started/index.html#brief-example","title":"Getting started > Brief example","text":"Brief example\n\nThis brief example demonstrates how the client works:\n\nThe client is now ready and available for use with an OpenAPI client."},{"objectID":"Home","href":"getting_started/index.html#platform-specific-kerberos-configuration","title":"Getting started > Platform-specific Kerberos configuration","text":"Platform-specific Kerberos configuration\n\nKerberos authentication should be supported wherever the MIT or Heimdal Kerberos client\ncan be installed. OpenAPI-Common has been tested on the platforms that follow.\nIf you manage to use it on another platform, consider contributing installation steps for\nyour platform by making a pull request."},{"objectID":"Home","href":"getting_started/index.html#ubuntu-2004","title":"Getting started > Ubuntu 20.04","text":"Ubuntu 20.04\n\nUbuntu requires the gssapi Python module to be built from source. This requires the\nKerberos headers, Python headers for the version of Python that you are using, and a\nsupported compiler. (GCC works well.)\n\nYou should then be able to install this module with the [linux-kerberos] extra:\n\nOnce the installation completes, ensure that your krb5.conf file is set up correctly\nfor your Kerberos configuration and that you have a valid keytab file, which is\nnormally in /etc/krb5.keytab."},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common._base.PrimitiveType.html#primitivetype","title":"PrimitiveType","text":"PrimitiveType\n\n\n\nPrimitiveType\n\nalias of float | bool | bytes | str | int"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.ApiClient.html#apiclient","title":"ApiClient","text":"ApiClient\n\n\n\nclass ApiClient(session, api_url, configuration)\n\nProvides a generic API client for OpenAPI client library builds.\n\nThis client handles client-server communication and is invariant across\nimplementations. Specifics of the methods and models for each application are\ngenerated from OpenAPI templates and are responsible for interfacing with the\npublic API exposed by the client.\n\nParameters\n\nsession\n\nrequests.Session\n\nBase session object that the API client is to use.\n\napi_url\n\npython:str\n\nBase URL for the API. All generated endpoint URLs are relative to this address.\n\nconfiguration\n\nSessionConfiguration\n\nConfiguration options for the API client.\n\nExamples\n\n>>> client = ApiClient(requests.Session(),\n...                    'http://my-api.com/API/v1.svc',\n...                    SessionConfiguration())\n... <ApiClient url: http://my-api.com/API/v1.svc>\n\nFor testing purposes, it is common to configure an API with a self-signed certificate. By default, the\nApiClient class will not trust self-signed SSL certificates. To allow this, pass a path to the\nroot certificate to the SessionConfiguration object. For more configuration examples, see\nSessionConfiguration.\n\n>>> session_config = SessionConfiguration(cert_store_path='./self-signed-cert.pem')\n... ssl_client = ApiClient(requests.Session(),\n...                    'https://secure-api/API/v1.svc',\n...                    session_config)\n... ssl_client\n<ApiClient url: https://secure-api/API/v1.svc>\n\nMethods\n\n\n\nAttributes\n\n"},{"objectID":"Release notes","href":"changelog.html#release-notes","title":"Release notes","text":"Release notes\n\nThis document contains the release notes for the project.\n\nSee CHANGELOG.md for release notes for v2.3.0 and earlier."},{"objectID":"Home","href":"index.html#openapi-common-240dev0","title":"OpenAPI-Common 2.4.0.dev0","text":"OpenAPI-Common 2.4.0.dev0\n\nOpenAPI-Common is part of the larger PyAnsys\neffort to facilitate the use of Ansys technologies directly from Python.\n\nGetting started \n\nLearn how to install OpenAPI-Common.\n\ngetting_started/index\n\nUser guide \n\nUnderstand how to use OpenAPI-Common as a base for OpenAPI-based\nclient applications.\n\nuser_guide/index\n\nAPI reference \n\nUnderstand the classes and methods that make up OpenAPI-Common.\n\napi/index\n\nContribute \n\nLearn how to contribute to the OpenAPI-Common codebase or documentation.\n\ncontributing\n\n"},{"objectID":"Home","href":"api/_autosummary/ansys.openapi.common.OIDCSessionBuilder.html#oidcsessionbuilder","title":"OIDCSessionBuilder","text":"OIDCSessionBuilder\n\n\n\nclass OIDCSessionBuilder(client_factory, session_factory=None)\n\nHelps create OpenID Connect sessions and provides OIDC-specific configuration options.\n\nParameters\n\nclient_factory\n\nApiClientFactory\n\nParent API client factory object that will be returned once configuration is complete.\n\nsession_factory\n\nOIDCSessionFactory, optional\n\nOIDC session factory object that will be configured and used to return an OAuth-supporting session.\n\nMethods\n\n"}]